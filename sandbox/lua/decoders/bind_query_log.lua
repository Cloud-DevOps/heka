-- This Source Code Form is subject to the terms of the Mozilla Public
-- License, v. 2.0. If a copy of the MPL was not distributed with this
-- file, You can obtain one at http://mozilla.org/MPL/2.0/.

--[[BIND query log Lua decoder script

BIND DNS query log decoder script for the Heka stream processor:

http://hekad.readthedocs.org/en/latest/

Sample BIND query log message, with the print-category, print-severity and print-time options
all set to 'yes' in the logging channel options in named.conf:

27-May-2015 21:06:49.246 queries: info: client 10.0.1.70#41242 (webserver.company.com): query: webserver.company.com IN A +E (10.0.1.71)

The things we want out of it are:

* The client IP
* The name that was queried
* The domain of the name that was queried
* The record type (A, MX, PTR, etc.)
* The address of the interface that BIND used for the reply

--]]

local l = require 'lpeg'
local math = require 'math'
local string = require 'string'
local date_time = require 'date_time'
local ip = require 'ip_address'
local table = require 'table'
local syslog   = require "syslog"
local bind = require "bind"

l.locale(l)

local formats  = read_config("formats")
--The config for the SandboxDecoder plugin should have the type set to 'bindquerylog'
local msg_type = read_config("type")

local msg = {
  --This value is read in from the 'msg_type' config option in the TOML:
  Type        = msg_type,
  Payload     = nil,
  Severity    = 'info',
  Fields      = {},
}

--Load the query log grammar from the bind module:
local grammar = l.Ct(bind.query_log_grammar)

function process_message ()

  --Create a local variable for the log line from the Payload of the incoming Heka message.
  --The LogstreamerInput that generates the messages automatically puts the 
  local query_log_line = read_message("Payload")

  --Create a fields table and use the :match method on the grammar object to fill it with the Lua table
  --of values generated by parsing the query_log_line:
  fields = grammar:match(query_log_line)

  --If fields is empty, exit immediately:
  if not fields then return -1 end
  --Set the time in the message we're generating and set it to nil in the original log line:
  msg.Timestamp = fields.time
  fields.time = nil

  --Set the Fields part of the generated message to the fields Lua table that was generated by the grammar:match function:
  msg.Fields = fields
  --Include the original, unparsed log line as the Payload of the message:
  msg.Payload = read_message("Payload")
  inject_message(msg)

  return 0

end
